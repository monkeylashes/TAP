<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.6.0.4 -->
  <assembly>
    <name>UnityEditor.UI</name>
  </assembly>
  <members>
    <member name="T:UnityEditor.Events.UnityEventTools">
      <summary>Editor tools for working with persistent UnityEvents.</summary>
    </member>
    <member name="T:UnityEditor.EventSystems.EventSystemEditor">
      <summary>
        <para>Custom Editor for the EventSystem Component.</para>
        <para>Extend this class to write a custom editor for an EventSystem-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EventSystems.EventTriggerEditor">
      <summary>
        <para>Custom Editor for the EventTrigger Component.</para>
        <para>Extend this class to write a custom editor for an EventTrigger-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.AnimationTriggersDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.AnimationTriggers" />.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.AnimationTriggers" /> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer" /> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.AspectRatioFitterEditor">
      <summary>Custom Editor for the AspectRatioFitter component.</summary>
    </member>
    <member name="T:UnityEditor.UI.ButtonEditor">
      <summary>
        <para>Custom Editor for the Button Component.</para>
        <para>Extend this class to write a custom editor for an Button-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.CanvasScalerEditor">
      <summary>Custom Editor for the CanvasScaler component.</summary>
    </member>
    <member name="T:UnityEditor.UI.ColorBlockDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.ColorBlock" />.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.ColorBlock" /> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer" /> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.ContentSizeFitterEditor">
      <summary>
        <para>Custom Editor for the ContentSizeFitter Component.</para>
        <para>Extend this class to write a custom editor for an ContentSizeFitter-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.DropdownEditor">
      <summary>
        <para>Custom editor for the Dropdown component.</para>
        <para>Extend this class to write a custom editor for an Dropdown-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.FontDataDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.FontData" />.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.FontData" /> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer" /> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.GraphicEditor">
      <summary>Extend this class to write your own graphic editor.</summary>
    </member>
    <member name="T:UnityEditor.UI.GridLayoutGroupEditor">
      <summary>
        <para>Custom Editor for the GridLayout Component.</para>
        <para>Extend this class to write a custom editor for an GridLayout-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.HorizontalOrVerticalLayoutGroupEditor">
      <summary>The Editor for the <see cref="UnityEngine.UI.HorizontalOrVerticalLayoutGroup" /> class.</summary>
    </member>
    <member name="T:UnityEditor.UI.ImageEditor">
      <summary>
        <para>Custom Editor for the Image Component.</para>
        <para>Extend this class to write a custom editor for an Image-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.InputFieldEditor">
      <summary>
        <para>Custom Editor for the InputField Component.</para>
        <para>Extend this class to write a custom editor for an InputField-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.LayoutElementEditor">
      <summary>Editor for the <see cref="UnityEngine.UI.LayoutElement" /> component.</summary>
    </member>
    <member name="T:UnityEditor.UI.MaskEditor">
      <summary>
        <para>Custom Editor for the Mask component.</para>
        <para>Extend this class to write a custom editor for a Mask-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.NavigationDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.Navigation" />.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.Navigation" /> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer" /> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.RawImageEditor">
      <summary>
        <para>Custom editor for RawImage.</para>
        <para>Extend this class to write a custom editor for a RawImage-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.RectMask2DEditor">
      <summary>
        <para>Custom editor for the RectMask2d component.</para>
        <para>Extend this class to write a custom editor for a Mask-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.ScrollbarEditor">
      <summary>
        <para>Custom Editor for the Scrollbar Component.</para>
        <para>Extend this class to write a custom editor for an Scrollbar-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.ScrollRectEditor">
      <summary>Editor for the <see cref="UnityEngine.UI.ScrollRect" /> component.</summary>
    </member>
    <member name="T:UnityEditor.UI.SelectableEditor">
      <summary>
        <para>Custom Editor for the Selectable Component.</para>
        <para>Extend this class to write a custom editor for an Selectable-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.SelfControllerEditor">
      <summary>Base class for custom editors that are for components that implement the SelfControllerEditor interface.</summary>
    </member>
    <member name="T:UnityEditor.UI.SliderEditor">
      <summary>
        <para>Custom Editor for the Slider Component.</para>
        <para>Extend this class to write a custom editor for an Slider-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.SpriteStateDrawer">
      <summary>
        <para>PropertyDrawer for <see cref="UnityEngine.UI.SpriteState" />.</para>
        <para>This is a PropertyDrawer for <see cref="UnityEngine.UI.SpriteState" /> it is implemented using the standard unity <see cref="UnityEditor.PropertyDrawer" /> framework.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.TextEditor">
      <summary>
        <para>Custom Editor for the Text Component.</para>
        <para>Extend this class to write a custom editor for an Text-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UI.ToggleEditor">
      <summary>
        <para>Custom Editor for the Toggle Component.</para>
        <para>Extend this class to write a custom editor for an Toggle-derived component.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UIOrientation">
      <summary>Default mobile device orientation.</summary>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddBoolPersistentListener(UnityEngine.Events.UnityEventBase,System.Boolean)">
      <summary>Adds a persistent, preset call to the listener.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddFloatPersistentListener(UnityEngine.Events.UnityEventBase,System.Single)">
      <summary>Adds a persistent, preset call to the listener.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddIntPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32)">
      <summary>Adds a persistent, preset call to the listener.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddObjectPersistentListener``1(UnityEngine.Events.UnityEventBase,``0)">
      <summary>Adds a persistent, preset call to the listener.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEventBase)">
      <summary>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</summary>
      <param name="unityEvent">Event to modify.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent,UnityEngine.Events.UnityAction)">
      <summary>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent``1,UnityEngine.Events.UnityAction``1)">
      <summary>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent``2,UnityEngine.Events.UnityAction``2)">
      <summary>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent``3,UnityEngine.Events.UnityAction``3)">
      <summary>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent``4,UnityEngine.Events.UnityAction``4)">
      <summary>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddStringPersistentListener(UnityEngine.Events.UnityEventBase,System.String)">
      <summary>Adds a persistent, preset call to the listener.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddVoidPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction)">
      <summary>Adds a persistent, preset call to the listener.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterBoolPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,System.Boolean)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterFloatPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,System.Single)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterIntPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,System.Int32)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterObjectPersistentListener``1(UnityEngine.Events.UnityEventBase,System.Int32,``0)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent,System.Int32,UnityEngine.Events.UnityAction)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent``1,System.Int32,UnityEngine.Events.UnityAction``1)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent``2,System.Int32,UnityEngine.Events.UnityAction``2)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent``3,System.Int32,UnityEngine.Events.UnityAction``3)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent``4,System.Int32,UnityEngine.Events.UnityAction``4)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterStringPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,System.String)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterVoidPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction)">
      <summary>Modifies the event at the given index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,System.Int32)">
      <summary>Removes the given function from the event.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction)">
      <summary>Removes the given function from the event.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction``1)">
      <summary>Removes the given function from the event.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction``2)">
      <summary>Removes the given function from the event.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction``3)">
      <summary>Removes the given function from the event.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction``4)">
      <summary>Removes the given function from the event.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.UnregisterPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32)">
      <summary>Unregisters the given listener at the specified index.</summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to unregister.</param>
    </member>
    <member name="M:UnityEditor.EventSystems.EventSystemEditor.HasPreviewGUI">
      <summary>Can this component be previewed in its current state?</summary>
      <returns>True if this component can be Previewed in its current state.</returns>
    </member>
    <member name="M:UnityEditor.EventSystems.EventSystemEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.EventSystems.EventSystemEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>Custom preview for Image component.</summary>
      <param name="rect">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
      <seealso cref="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.EventSystems.EventSystemEditor.RequiresConstantRepaint">
      <summary>Does this edit require to be repainted constantly in its current state?</summary>
    </member>
    <member name="M:UnityEditor.EventSystems.EventTriggerEditor.OnInspectorGUI">
      <summary>Implement specific EventTrigger inspector GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
      <seealso cref="M:UnityEditor.Editor.OnInspectorGUI" />
    </member>
    <member name="M:UnityEditor.UI.AspectRatioFitterEditor.OnInspectorGUI">
      <summary>See Editor.OnInspectorGUI.</summary>
    </member>
    <member name="M:UnityEditor.UI.ButtonEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.ContentSizeFitterEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.DropdownEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.FontDataDrawer.Init(UnityEditor.SerializedProperty)">
      <summary>Initialize the serialized properties for the drawer.</summary>
    </member>
    <member name="M:UnityEditor.UI.GraphicEditor.OnInspectorGUI">
      <summary>Implement specific GraphicEditor inspector GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
    </member>
    <member name="M:UnityEditor.UI.GraphicEditor.AppearanceControlsGUI">
      <summary>GUI related to the appearance of the graphic. Color and Material properties appear here.</summary>
    </member>
    <member name="M:UnityEditor.UI.GraphicEditor.NativeSizeButtonGUI">
      <summary>GUI for showing a button that sets the size of the RectTransform to the native size for this Graphic.</summary>
    </member>
    <member name="M:UnityEditor.UI.GraphicEditor.OnDisable">
      <summary>See <see cref="UnityEngine.MonoBehaviour.OnDisable" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.GraphicEditor.RaycastControlsGUI">
      <summary>GUI related to the Raycasting settings for the graphic.</summary>
    </member>
    <member name="M:UnityEditor.UI.GraphicEditor.SetShowNativeSize(System.Boolean,System.Boolean)">
      <summary>Set if the 'Set Native Size' button should be visible for this editor.</summary>
    </member>
    <member name="M:UnityEditor.UI.GridLayoutGroupEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.HorizontalOrVerticalLayoutGroupEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.GetInfoString">
      <summary>A string cointaining the Image details to be used as a overlay on the component Preview.</summary>
      <returns>The Image details.</returns>
      <seealso cref="M:UnityEditor.ObjectPreview.GetInfoString" />
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.HasPreviewGUI">
      <summary>Can this component be Previewed in its current state?</summary>
      <returns>True if this component can be Previewed in its current state.</returns>
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.OnInspectorGUI">
      <summary>Implement specific ImageEditor inspector GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
      <seealso cref="M:UnityEditor.Editor.OnInspectorGUI" />
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>Custom preview for Image component.</summary>
      <param name="rect">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
      <seealso cref="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.OnDisable">
      <summary>See <see cref="UnityEngine.MonoBehaviour.OnDisable" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.SpriteGUI">
      <summary>
        <para>GUI for showing the Sprite property.</para>
        <para>This also handles automatic selection of appropriate default image type based on sprite borders.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.UI.ImageEditor.TypeGUI">
      <summary>GUI for showing the image type and associated settings.</summary>
    </member>
    <member name="M:UnityEditor.UI.InputFieldEditor.OnInspectorGUI">
      <summary>See: <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.LayoutElementEditor.OnInspectorGUI">
      <summary>See: <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.RawImageEditor.GetInfoString">
      <summary>A string cointaining the Image details to be used as a overlay on the component Preview.</summary>
      <returns>The RawImage details.</returns>
      <seealso cref="M:UnityEditor.ObjectPreview.GetInfoString" />
    </member>
    <member name="M:UnityEditor.UI.RawImageEditor.HasPreviewGUI">
      <summary>Can this component be Previewed in its current state?</summary>
      <returns>True if this component can be Previewed in its current state.</returns>
    </member>
    <member name="M:UnityEditor.UI.RawImageEditor.OnInspectorGUI">
      <summary>Implement specific RawImage inspector GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</summary>
      <seealso cref="M:UnityEditor.Editor.OnInspectorGUI" />
    </member>
    <member name="M:UnityEditor.UI.RawImageEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>Custom preview for Image component.</summary>
      <param name="rect">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
      <seealso cref="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)" />
    </member>
    <member name="M:UnityEditor.UI.ScrollbarEditor.OnInspectorGUI">
      <summary>See: <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.ScrollRectEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.ScrollRectEditor.OnDisable">
      <summary>See <see cref="UnityEngine.MonoBehaviour.OnDisable" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.SelectableEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.SelectableEditor.OnDisable">
      <summary>See <see cref="UnityEngine.MonoBehaviour.OnDisable" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.SelfControllerEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.SliderEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.TextEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="M:UnityEditor.UI.ToggleEditor.OnInspectorGUI">
      <summary>See <see cref="UnityEditor.Editor.OnInspectorGUI" />.</summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.Portrait">
      <summary>Portrait.</summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.PortraitUpsideDown">
      <summary>Portrait upside down.</summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.LandscapeRight">
      <summary>Landscape: clockwise from Portrait.</summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.LandscapeLeft">
      <summary>Landscape : counter-clockwise from Portrait.</summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.AutoRotation">
      <summary>Auto Rotation Enabled.</summary>
    </member>
  </members>
</doc>